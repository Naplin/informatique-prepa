from collections import deque
from math import inf
from util_files import *

# Outils conversion liste d'adjacence - matrice d'adjacence
def matrice_vers_liste(m):
    l = []
    for i in range(len(m)):
        l0 = []
        for j in range(len(m[i])):
            if m[i][j]:
                l0.append(j)
        l.append(l0)
    return l

def liste_vers_matrice(l):
    n = len(l)
    m = []
    for i in l:
        l0 = []
        for j in range(n):
            l0.append(j in i)
        m.append(l0)
    return m

# Parcours profondeur
def visiter(lst_g, s, visite):
    # print(s)
    visite[s] = True
    for voisin in lst_g[s]:
        if not visite[voisin]:
            visiter(lst_g, voisin, visite)

def parcours_profondeur(lst_g, s):
    n = len(lst_g)
    visite = [False] * n
    visiter(lst_g, s, visite)

def est_connexe(lst_g):
    n = len(lst_g)
    visite = [False] * n
    visiter(lst_g, 0, visite)

    # si le tableau visite contient un False, tous
    # les sommets n'ont pas été visité donc le
    # graphe n'est pas connexe.
    for b in visite:
        if not b:
            return False
    return True

# Grand graphe (liste d'adjacence)
labyrinthe_lst = [[30], [31], [32], [33], [5, 34], [4, 6], [5, 36], [8], [7, 9, 38], [8, 10], [9, 40], [12, 41], [11, 13], [12], [15], [14, 16, 45], [15, 17, 46], [16, 18, 47], [17, 19], [18, 49], [50], [51], [23], [22, 24], [23, 25, 54], [24, 26, 55], [25, 27, 56], [26, 28], [27, 29], [28, 59], [0, 31, 60], [1, 30, 32], [2, 31, 33, 62], [3, 32, 34], [4, 33, 35, 64], [34, 65], [6], [38], [8, 37, 68], [40], [10, 39, 41], [11, 40, 71], [72], [44], [43, 45, 74], [15, 44, 75], [16], [17], [49], [19, 48, 50, 79], [20, 49, 51], [21, 50, 81], [82], [83], [24], [25, 85], [26], [87], [88], [29, 89], [30], [91], [32, 63, 92], [62], [34, 94], [35], [96], [68], [38, 67, 69, 98], [68], [71], [41, 70, 72, 101], [42, 71, 73, 102], [72, 74, 103], [44, 73, 104], [45], [77, 106], [76, 78], [77, 108], [49], [81], [51, 80, 82, 111], [52, 81, 83], [53, 82, 84, 113], [83], [55, 115], [87], [57, 86, 88, 117], [58, 87, 89], [59, 88, 119], [91], [61, 90, 92, 121], [62, 91, 93], [92], [64, 124], [96], [66, 95, 97, 126], [96, 98, 127], [68, 97, 99, 128], [98], [130], [71], [72], [73], [74], [135], [76], [137], [78, 138], [139], [140], [81], [142], [83, 114, 143], [113], [85, 145], [117], [87, 116, 118, 147], [117], [89, 149], [121], [91, 120, 122, 151], [121], [124], [94, 123], [126], [96, 125, 156], [97], [98], [159], [100, 131, 160], [130, 132], [131, 133, 162], [132, 134, 163], [133, 135, 164], [105, 134, 136, 165], [135], [107, 138, 167], [108, 137, 139], [109, 138, 140, 169], [110, 139, 170], [142], [112, 141, 143, 172], [113, 142, 144], [143], [115], [147], [117, 146, 177], [178], [119], [180], [121, 152, 181], [151], [183], [155], [154, 156, 185], [126, 155, 157, 186], [156], [159], [129, 158, 160, 189], [130, 159, 161], [160], [132], [133], [134], [135, 166, 195], [165, 167, 196], [137, 166, 168, 197], [167], [139], [140, 200], [172], [142, 171, 202], [203], [204], [205], [177], [147, 176, 178], [148, 177, 208], [209], [150, 181, 210], [151, 180], [183], [153, 182, 184, 213], [183, 185, 214], [155, 184, 215], [156], [217], [218], [159, 190, 219], [189], [221], [222], [223], [224], [165], [166], [167], [228], [200], [170, 199, 230], [202], [172, 201, 203, 232], [173, 202, 204, 233], [174, 203, 205], [175, 204, 235], [236], [237], [178, 209], [179, 208, 239], [180, 240], [212], [211, 213, 242], [183, 212, 243], [184], [185], [217, 246], [187, 216, 218], [188, 217, 219], [189, 218, 220], [219], [191, 222, 251], [192, 221, 223, 252], [193, 222, 224], [194, 223, 254], [226], [225, 227, 256], [226, 228], [198, 227, 258], [230], [200, 229, 231, 260], [230, 261], [202], [203], [235], [205, 234, 236, 265], [206, 235, 237], [207, 236, 238, 267], [237], [209, 269], [210, 270], [242], [212, 241, 272], [213], [245], [244, 246], [216, 245, 276], [277], [278], [279], [251], [221, 250, 281], [222], [254], [224, 253, 255, 284], [254, 256, 285], [226, 255, 286], [258], [228, 257, 259], [258, 260], [230, 259], [231, 262], [261, 263, 292], [262, 264, 293], [263, 294], [235], [267], [237, 266, 268, 297], [267], [239, 299], [240, 300], [272], [242, 271, 273, 302], [272, 274, 303], [273], [276], [246, 275, 277, 306], [247, 276, 278, 307], [248, 277, 279], [249, 278, 280, 309], [279], [251, 282, 311], [281, 283, 312], [282, 313], [254], [255], [256, 287], [286], [318], [319], [320], [321], [262], [263, 323], [264], [325], [326], [267, 298, 327], [297], [269, 329], [270, 301], [300, 331], [272], [273, 304, 333], [303], [306], [276, 305, 336], [277], [309], [279, 308, 310, 339], [309], [281], [282], [283, 314, 343], [313], [316, 345], [315], [318], [288, 317, 319, 348], [289, 318, 320], [290, 319, 321, 350], [291, 320, 322, 351], [321], [293], [354], [295, 326, 355], [296, 325, 327], [297, 326, 328, 357], [327], [299, 359], [360], [301, 361], [333], [303, 332, 334, 363], [333, 335, 364], [334], [306, 337, 366], [336], [339], [309, 338, 340, 369], [339], [371], [343], [313, 342, 344, 373], [343, 345, 374], [315, 344], [376], [377], [318, 349, 378], [348], [320], [321, 352, 381], [351], [354], [324, 353, 355, 384], [325, 354, 356], [355], [327], [359, 388], [329, 358], [330, 361, 390], [331, 360, 362], [361, 392], [333], [334, 365, 394], [364], [336, 367, 396], [366], [369], [339, 368, 370, 399], [369], [341, 372], [371, 402], [343], [344, 404], [376], [346, 375, 377, 406], [347, 376, 378], [348, 377, 379, 408], [378], [381], [351, 380, 382, 411], [381], [384], [354, 383, 385, 414], [384], [387], [386, 388, 417], [358, 387, 389], [388, 419], [360, 420], [421], [362], [394], [364, 393, 395, 424], [394], [366, 397, 426], [396], [399], [369, 398, 429], [430], [431], [372, 403], [402, 404, 433], [374, 403], [435], [376, 407, 436], [406], [378], [410, 439], [409, 411, 440], [381, 410, 412, 441], [411], [443], [384, 415, 444], [414], [446], [387, 418, 447], [417], [389, 449], [390, 421], [391, 420, 451], [452], [424], [394, 423, 425, 454], [424], [396, 427], [426, 457], [429], [399, 428, 430, 459], [400, 429, 431], [401, 430, 432, 461], [431], [403], [435], [405, 434, 436, 465], [406, 435, 437], [436], [439, 468], [409, 438, 469], [410], [411], [443, 472], [413, 442, 444], [414, 443, 445, 474], [444], [416, 447, 476], [417, 446, 448], [447], [419], [451, 480], [421, 450, 452], [422, 451, 482], [454], [424, 453, 455, 484], [454, 456, 485], [455], [427, 458], [457, 488], [429], [461], [431, 460, 491], [492], [493], [465], [435, 464, 466, 495], [465], [468, 497], [438, 467, 498], [439], [471, 500], [470, 472], [442, 471, 473, 502], [472], [444], [476], [446, 475, 506], [507], [508], [509], [450, 510], [482], [452, 481, 483, 512], [482], [454], [455, 486, 515], [485, 487, 516], [486], [458, 489, 518], [488], [491], [461, 490, 492, 521], [462, 491, 493], [463, 492, 494, 523], [493], [465], [497, 526], [467, 496, 527], [468], [500, 529], [470, 499, 501], [500], [472], [533], [534], [535], [476, 507], [477, 506, 508], [478, 507, 509], [479, 508, 539], [480], [541], [482, 513, 542], [512], [544], [485], [486, 517, 546], [516], [488, 519, 548], [518, 520, 549], [519, 550], [491], [552], [493, 524, 553], [523], [526], [496, 525, 556], [497], [529, 558], [499, 528, 530], [529], [561], [533, 562], [503, 532, 534], [504, 533, 535, 564], [505, 534, 536, 565], [535], [567], [539], [509, 538, 569], [570], [511, 542, 571], [512, 541], [544], [514, 543, 545, 574], [544, 546, 575], [516, 545, 547, 576], [546], [518], [519, 579], [520], [552], [522, 551, 553, 582], [523, 552], [555], [554, 556, 585], [526, 555, 557, 586], [556], [528, 559, 588], [558], [561], [531, 560, 562, 591], [532, 561, 563], [562], [534], [535, 566, 595], [565, 567, 596], [537, 566, 568, 597], [567], [539, 599], [540, 571, 600], [541, 570], [573], [572, 574, 603], [544, 573, 604], [545], [546], [607], [579], [549, 578], [610], [611], [552, 612], [584], [583, 585, 614], [555, 584, 615], [556], [617], [558, 589, 618], [588], [591], [561, 590, 621], [622], [623], [595], [565, 594], [566], [567, 598, 627], [597, 599, 628], [569, 598], [570, 630], [602], [601, 603, 632], [573, 602, 633], [574], [606, 635], [605, 607], [577, 606, 608, 637], [607], [610], [580, 609, 611, 640], [581, 610, 612], [582, 611, 642], [614], [584, 613, 644], [585], [646], [587, 618, 647], [588, 617, 619], [618], [621, 650], [591, 620, 622], [592, 621, 623], [593, 622, 624, 653], [623], [626, 655], [625], [597], [598, 629, 658], [628], [600, 631, 660], [630, 632, 661], [602, 631, 662], [603], [635, 664], [605, 634, 636], [635], [607, 638, 667], [637], [640], [610, 639, 670], [671], [612], [644], [614, 643, 645, 674], [644, 646, 675], [616, 645, 647, 676], [617, 646, 648, 677], [647], [650, 679], [620, 649], [681], [682], [623, 654, 683], [653], [625, 685], [657], [656, 658, 687], [628, 657, 659, 688], [658], [630, 690], [631], [632], [664], [634, 663, 665, 694], [664], [667], [637, 666, 668, 697], [667], [670], [640, 669, 671], [641, 670, 701], [673, 702], [672], [644], [645], [646], [647], [679, 708], [649, 678, 709], [681], [651, 680, 682, 711], [652, 681, 683], [653, 682, 684], [683], [655, 686, 715], [685, 687, 716], [657, 686, 717], [658], [719], [660, 691, 720], [690], [693], [692, 723], [664, 695, 724], [694], [697, 726], [667, 696, 698, 727], [697], [729], [730], [671, 702], [672, 701, 732], [704, 733], [703, 705], [704, 706, 735], [705, 707, 736], [706], [678], [679, 739], [711], [681, 710, 741], [742], [743], [744], [685], [686, 746], [687], [719, 748], [689, 718], [690, 721, 750], [720, 722, 751], [721], [693, 724, 753], [694, 723, 725], [724], [696, 756], [697], [729, 758], [699, 728, 730], [700, 729, 731, 760], [730], [702, 733], [703, 732, 763], [764], [705], [706, 737, 766], [736, 738, 767], [737], [709], [741], [711, 740, 742], [712, 741, 743], [713, 742, 744], [714, 743, 745, 774], [744], [716, 747, 776], [746, 748, 777], [718, 747, 749, 778], [748], [720], [721, 752, 781], [751, 753, 782], [723, 752, 754, 783], [753], [756, 785], [726, 755, 757, 786], [756], [728, 759, 788], [758], [730, 761, 790], [760, 762, 791], [761], [733, 764], [734, 763, 794], [795], [736], [737, 768, 797], [767, 769, 798], [768], [800], [801], [802], [774], [744, 773, 804], [805], [746], [747], [748, 779, 808], [778], [810], [751], [752], [753], [785, 814], [755, 784, 815], [756], [817], [758, 789, 818], [788], [760], [761, 792, 821], [791], [823], [764, 795], [765, 794, 796, 825], [795], [767], [768, 799, 828], [798, 800, 829], [770, 799, 801, 830], [771, 800, 802, 831], [772, 801, 803, 832], [802], [774, 805], [775, 804, 806, 835], [805], [808], [778, 807, 809, 838], [808, 839], [780, 811, 840], [810], [813], [812, 814, 843], [784, 813, 844], [785], [817], [787, 816, 818], [788, 817, 819, 848], [818], [821], [791, 820, 822, 851], [821, 823, 852], [793, 822, 824, 853], [823], [795, 826, 855], [825], [857], [798], [799], [800], [801], [802, 833, 862], [832], [864], [805, 836, 865], [835], [867], [808], [809, 869], [810, 870], [842], [841, 843, 872], [813, 842, 873], [814], [875], [876], [877], [818, 849, 878], [848], [880], [821], [822], [823, 854, 883], [853], [825, 856, 885], [855], [827, 858, 887], [857, 859], [858, 889], [890], [862], [832, 861, 863, 892], [862], [834, 865, 894], [835, 864, 866], [865], [837, 868, 897], [867, 869, 898], [839, 868, 899], [840, 871], [870, 872], [842, 871], [843, 874], [873, 875], [845, 874, 876], [846, 875, 877], [847, 876, 878], [848, 877, 879], [878], [850, 881], [880, 882], [881, 883], [853, 882, 884], [883, 885], [855, 884, 886], [885], [857], [889], [859, 888, 890], [860, 889, 891], [890, 892], [862, 891, 893], [892, 894], [864, 893, 895], [894], [897], [867, 896], [868], [869]]

# Parcours largeur
def parcours_largeur(g, s):
    file = deque()
    file.appendleft(s)
    n = len(g)
    deja_enfile = [False] * n
    deja_enfile[s] = True
    while not est_vide_file(file):
        x = file.pop()
        for y in g[x]:
            if not deja_enfile[y]:
                file.appendleft(y)
                deja_enfile[y] = True
    return deja_enfile

def distance(g, s):
    file = deque()
    file.appendleft(s)
    n = len(g)

    distance = [inf] * n
    distance[s] = 0

    while not est_vide_file(file):
        x = file.pop()
        for y in g[x]:
            if distance[y] == inf:
                distance[y] = distance[x] + 1
                file.appendleft(y)
    return distance

def est_accessible(g, x, y):
    n = len(g)
    t = [False] * n
    def visiter_eff(g, x, y, t):
        t[x] = True
        if x == y:
            return
        for i in g[x]:
            if not t[i]:
                visiter_eff(g, i, y, t)
    visiter_eff(g, x, y, t)
    return t[y]

def liste_peres(g, s):
    n = len(g)
    t = [False] * n
    l = [-1] * n
    def visiter(g, s, t, l):
        t[s] = True
        for i in g[s]:
            if not t[i]:
                l[i] = s
                visiter(g, i, t, l)
    visiter(g, s, t, l)
    return l

def chemin(g, x, y):
    assert est_accessible(g, x, y)
    k = y
    c = []
    l = liste_peres(g, x)
    while l[k] != x:
        c.append(l[k])
        k = l[k]
    return c[::-1]

# Lecture de fichiers graphes
def correction_nb(l):
    a = 0
    for i in range(len(l)):
        if l[i] == " ":
            a = i
    return int(l[:a]), int(l[a:])

def correction_arc(l):
    a, b = 0, 0
    for i in range(len(l)):
        if l[i] == " ":
            if a == 0:
                a = i
            else:
                b = i
    return int(l[:a]), int(l[a:b]), float(l[b:])

def lire_graphe(filename):
    file = open(filename, 'r')
    l0 = file.readline()
    n, _ = correction_nb(l0)
    g = [[] for _ in range(n)]
    for l in file.readlines():
        x, y, p = correction_arc(l)
        g[x].append((y, p))
    return g

small = lire_graphe('small.gr')
medium = lire_graphe('medium.gr')
large = lire_graphe('large.gr')
